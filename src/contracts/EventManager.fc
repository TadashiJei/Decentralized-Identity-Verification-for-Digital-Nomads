#pragma version >=0.2.0;

#include "imports/stdlib.fc";
#include "imports/params.fc";

;; Storage Variables
global_const int min_tons_for_storage = 10000000; ;; 0.01 TON
global_const int gas_consumption = 10000000;     ;; 0.01 TON

;; Storage Structure
;; events_dict: (event_id -> EventData)
;; identity_dict: (user_address -> IdentityData)
;; certificates_dict: (cert_id -> CertificateData)

(slice, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),    ;; owner_address
        ds~load_dict(),        ;; events_dict
        ds~load_dict(),        ;; identity_dict
        ds~load_dict()         ;; certificates_dict
    );
}

() save_data(slice owner_address, cell events_dict, cell identity_dict, cell certificates_dict) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_dict(events_dict)
        .store_dict(identity_dict)
        .store_dict(certificates_dict)
        .end_cell());
}

;; Identity Verification
() verify_identity(slice user_address, cell identity_data) impure {
    (slice owner_address, cell events_dict, cell identity_dict, cell certificates_dict) = load_data();
    
    ;; Store verified identity
    identity_dict~udict_set_builder(256, slice_hash(user_address), begin_cell()
        .store_dict(identity_data)
        .store_uint(now(), 64) ;; verification timestamp
    );
    
    save_data(owner_address, events_dict, identity_dict, certificates_dict);
}

;; Event Management
() create_event(slice event_id, slice organizer, int start_time, int end_time, 
               int max_participants, int ticket_price, cell event_metadata) impure {
    (slice owner_address, cell events_dict, cell identity_dict, cell certificates_dict) = load_data();
    
    ;; Verify organizer has verified identity
    throw_unless(401, udict_has?(identity_dict, 256, slice_hash(organizer)));
    
    ;; Store event data
    events_dict~udict_set_builder(256, slice_hash(event_id), begin_cell()
        .store_slice(organizer)
        .store_uint(start_time, 64)
        .store_uint(end_time, 64)
        .store_uint(max_participants, 16)
        .store_coins(ticket_price)
        .store_dict(event_metadata)
    );
    
    save_data(owner_address, events_dict, identity_dict, certificates_dict);
}

;; NFT Certificate Management
() mint_certificate(slice recipient, slice event_id, cell achievement_data) impure {
    (slice owner_address, cell events_dict, cell identity_dict, cell certificates_dict) = load_data();
    
    ;; Verify recipient has verified identity
    throw_unless(401, udict_has?(identity_dict, 256, slice_hash(recipient)));
    
    ;; Generate certificate ID
    slice cert_id = begin_cell()
        .store_slice(event_id)
        .store_slice(recipient)
        .store_uint(now(), 64)
        .end_cell().begin_parse();
    
    ;; Store certificate data
    certificates_dict~udict_set_builder(256, slice_hash(cert_id), begin_cell()
        .store_slice(recipient)
        .store_slice(event_id)
        .store_uint(now(), 64)
        .store_dict(achievement_data)
    );
    
    save_data(owner_address, events_dict, identity_dict, certificates_dict);
}

;; Message Handler
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return (); 
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    
    int op = in_msg_body~load_uint(32);
    
    if (op == 1) { ;; Verify Identity
        cell identity_data = in_msg_body~load_ref();
        verify_identity(sender_address, identity_data);
    } elseif (op == 2) { ;; Create Event
        slice event_id = in_msg_body~load_msg_addr();
        int start_time = in_msg_body~load_uint(64);
        int end_time = in_msg_body~load_uint(64);
        int max_participants = in_msg_body~load_uint(16);
        int ticket_price = in_msg_body~load_coins();
        cell event_metadata = in_msg_body~load_ref();
        create_event(event_id, sender_address, start_time, end_time, 
                    max_participants, ticket_price, event_metadata);
    } elseif (op == 3) { ;; Mint Certificate
        slice recipient = in_msg_body~load_msg_addr();
        slice event_id = in_msg_body~load_msg_addr();
        cell achievement_data = in_msg_body~load_ref();
        mint_certificate(recipient, event_id, achievement_data);
    }
}